package rts.dgs.plugins.sketsa.dgstools.actions;

import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.geom.Rectangle2D;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.ResourceBundle;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JRootPane;
import javax.swing.KeyStroke;
import kiyut.sketsa.io.DefaultFileFilter;
import kiyut.sketsa.util.DOMUtilities;
import kiyut.sketsa.util.IOUtilities;
import kiyut.sketsa.util.UnitConversion;
import kiyut.swing.combo.SeparatorComboBox;
import org.apache.batik.transcoder.DefaultErrorHandler;
import org.apache.batik.transcoder.SVGAbstractTranscoder;
import org.apache.batik.transcoder.Transcoder;
import org.apache.batik.transcoder.TranscoderInput;
import org.apache.batik.transcoder.TranscoderOutput;
import org.apache.fop.svg.PDFTranscoder;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.util.NbBundle;
import org.w3c.dom.svg.SVGDocument;

/** ShowDGSOptionsWindow
 *
 * @author  Kiyut
 */
public class ShowDGSOptionsWindow extends javax.swing.JDialog {
    private SVGDocument svgDocument;
    
    private static ResourceBundle bundle = ResourceBundle.getBundle("rts.dgs.plugins.sketsa.dgstools.actions.ShowDGSOptionsWindow");
    
    private List<String[]> sizeList;
    private List<String[]> unitList;
    private List<String> dpiList;
    private String oldUnit;
    
    /** Creates new dialog  */
    public ShowDGSOptionsWindow(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        initCustomComponents();
        setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        this.getRootPane().setDefaultButton(applyButton);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        optionPane = new javax.swing.JPanel();
        enableGIFSupportCheck = new javax.swing.JCheckBox();
        buttonPane = new javax.swing.JPanel();
        applyButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setTitle(bundle.getString("CTL_Title.Text")); // NOI18N
        setResizable(false);

        optionPane.setBorder(javax.swing.BorderFactory.createEmptyBorder(12, 12, 12, 12));
        optionPane.setLayout(new java.awt.GridBagLayout());

        enableGIFSupportCheck.setLabel("Enable GIF support");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        optionPane.add(enableGIFSupportCheck, gridBagConstraints);

        buttonPane.setLayout(new java.awt.GridLayout(1, 0, 5, 0));

        applyButton.setText(bundle.getString("CTL_ExportButton.Text")); // NOI18N
        applyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyButtonActionPerformed(evt);
            }
        });
        buttonPane.add(applyButton);

        cancelButton.setText(bundle.getString("CTL_CloseButton.Text")); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        buttonPane.add(cancelButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.weightx = 1.0;
        optionPane.add(buttonPane, gridBagConstraints);

        getContentPane().add(optionPane, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        setVisible(false);
        dispose();
}//GEN-LAST:event_cancelButtonActionPerformed
    
    private void applyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyButtonActionPerformed
        try {
            validateOption();
        } catch (Exception ex) {
            NotifyDescriptor nd =  new NotifyDescriptor.Message(ex.getMessage(), NotifyDescriptor.ERROR_MESSAGE);
            DialogDisplayer.getDefault().notify(nd);
            return;
        }
		// save the options now
		applyOptions();
		setVisible(false);
		dispose();
}//GEN-LAST:event_applyButtonActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton applyButton;
    private javax.swing.JPanel buttonPane;
    private javax.swing.JButton cancelButton;
    private javax.swing.JCheckBox enableGIFSupportCheck;
    private javax.swing.JPanel optionPane;
    // End of variables declaration//GEN-END:variables
    
    @Override
    protected JRootPane createRootPane() { 
        JRootPane theRootPane = super.createRootPane();
        KeyStroke stroke = KeyStroke.getKeyStroke("ESCAPE");
        Action actionListener = new AbstractAction() { 
            public void actionPerformed(ActionEvent evt) { 
                setVisible(false);
            } 
        };
        InputMap inputMap = theRootPane.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        inputMap.put(stroke, "ESCAPE");
        theRootPane.getActionMap().put("ESCAPE", actionListener);

        return theRootPane;
    } 
    
    private void initCustomComponents() {
		if(rts.dgs.plugins.sketsa.dgstools.actions.ShowDGSOptionsAction.gifRegistryEntry!=null) {
			this.enableGIFSupportCheck.setSelected(rts.dgs.plugins.sketsa.dgstools.actions.ShowDGSOptionsAction.gifRegistryEntry.isEnabled());
		}
    }
    
    public void setArea(Rectangle2D area) {
        //this.area = area;
        if (area!=null) {
        }
    }
    
    public void setSVGDocument(SVGDocument doc) {
        this.svgDocument = doc;
    }
    
    private void validateOption() {
	}

	private void applyOptions() {
		if(rts.dgs.plugins.sketsa.dgstools.actions.ShowDGSOptionsAction.gifRegistryEntry!=null) {
			if(this.enableGIFSupportCheck.isSelected()) {
				rts.dgs.plugins.sketsa.dgstools.actions.ShowDGSOptionsAction.gifRegistryEntry.enable();
			} else {
				rts.dgs.plugins.sketsa.dgstools.actions.ShowDGSOptionsAction.gifRegistryEntry.disable();
			}
		}
	}
}
